// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220310063339_Altered1to1andAddProf")]
    partial class Altered1to1andAddProf
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Property<int>("AppUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("AppUserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Entities.Field", b =>
                {
                    b.Property<int>("FieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("FieldId");

                    b.ToTable("Field");
                });

            modelBuilder.Entity("API.Entities.Professional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int?>("AppUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BriefDesc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmploymentStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("FName")
                        .HasColumnType("TEXT");

                    b.Property<int>("FieldId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IDNum")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Phone")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Porfolio")
                        .HasColumnType("TEXT");

                    b.Property<string>("Qual1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Qual2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Qual3")
                        .HasColumnType("TEXT");

                    b.Property<string>("QualOther")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("FieldId");

                    b.ToTable("Professional");
                });

            modelBuilder.Entity("API.Entities.Sme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int?>("AppUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("RepresentLName")
                        .HasColumnType("TEXT");

                    b.Property<string>("RepresentName")
                        .HasColumnType("TEXT");

                    b.Property<int>("RepresentPhone")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Sme");
                });

            modelBuilder.Entity("API.Entities.Professional", b =>
                {
                    b.HasOne("API.Entities.AppUser", "User")
                        .WithOne("Professional")
                        .HasForeignKey("API.Entities.Professional", "AppUserId");

                    b.HasOne("API.Entities.Field", "Field")
                        .WithMany("Professional")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.Sme", b =>
                {
                    b.HasOne("API.Entities.AppUser", "User")
                        .WithOne("Sme")
                        .HasForeignKey("API.Entities.Sme", "AppUserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Navigation("Professional");

                    b.Navigation("Sme");
                });

            modelBuilder.Entity("API.Entities.Field", b =>
                {
                    b.Navigation("Professional");
                });
#pragma warning restore 612, 618
        }
    }
}
